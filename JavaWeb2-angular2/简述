一、package.json简要说明
1、devDependencies和dependencies的区别
devDependencies在开发中会依赖其一些功能（形如JUnit），但是在部署时不会添加使用进去；
dependencies是项目开发和部署所依赖的（形如node_modules里的文件）
2、对于依赖包的查找可以访问：https://www.npmjs.com/
3、如果使用webpack和webpack-dev-server，那么需要充分考虑到版本兼容
二、webpack.config.js简要说明
1、“filename: 'bundle.js'”这个是指定打包后的输出文件名，需要被引入到index.html中去
2、entry指明了主入口，不可缺少
三、Angular2个人理解的知识点
1、{{表达式}}及private test:String = "abc";{{test | uppercase}}
2、[]=>组件到模板；()=>模板到组件
3、<div [title="x"]>123</div>
import {Input} from '@angular/core';
@Input() x = 11;
4、<img [src]="..."/> <img (click)="..."/> <div [ngClass]="..."></div> <div [ngSubmit]="..."></div>
5、<p #abc>10</p> <span>{{abc.textContent}}</span>
6、<input TYPE="text" #abc/> <button (click)="onLog(abc.value)">Log</button>
7、component注入service
import service
@Component providers
constructor private service
8、URL带参数
path->'home/:id'
import  ActivatedRoute from '@angular/router'
constructor private activatedRoute:ActivatedRoute
activatedRoute.snapshot.params['id']
9、路径
方式一：
{path:'sysManager/userManger',component:UserComponent},
{path:'sysManager/roleManger',component:RoleComponent}
方式二：
{path:'sysManager/userManger',component:UserComponent,children:ROUTES_USER},
{path:'sysManager/roleManger',component:RoleComponent,children:ROUTES_ROLE}
方式三：
{
    path:'home',component:HomeComponent,children:[
        ...CenteralRoutes,...UserManageRoutes
    ]
}
方式四：
{path:'home',loadChildren:'app/home/home.module#HomeModule',canActivate:[AuthService]}
10、访问权限
页面URL路径及操作按钮任何人都可见、可操作；
页面URL路径及操作按钮登录后可见、可操作；
页面URL路径及操作按钮拥有相应权限后可见、可操作；
11、<input #a/> <input #b/> <button (click)="clickMe(a,b)">click</button>
clickMe(a:HTMLInputElement,b:HTMLInputElement){
    console.log(a.value);
    console.log(`${a.value},${b.value}`);
}
四、在angular-cli自动生成范围外的内容
1、bootstrap
①package.json添加"ng2-bootstrap":"1.4.2"和"bootstrap":"3.3.7"
②.angular-cli.json添加"../node_modules/bootstrap/dist/css/bootstrap.min.css"
五、待解决问题
1、在sidebar.html界面中，后端返回给前端的是一个理论上具有无限层级的树形结构，但是前端拿到这个嵌套树形结构层级对象时如何展示是个问题
需要考虑到angular-cli的版本、angular自身的版本、nodejs的版本及package.josn中各版本的兼容关系